/**
 *
 *  Copyright (C) 2014 Ash (Tuxdude) [tuxdude.github@gmail.com]
 *
 *  This file is part of https://github.com/Tuxdude/gradle-plugins.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */


// Determine if the project has applied either the java plugin or
// the android plugin
ext.isJavaProject = project.getPlugins().hasPlugin('java')
ext.isAndroidLibraryProject =
    project.getPlugins().hasPlugin('com.android.library') ||
    project.getPlugins().hasPlugin('android-library')

if (isAndroidLibraryProject) {
    println "Found android library plugin in the project"
}
else if (isJavaProject) {
    println "Found java plugin in the project"
}

if (!isAndroidLibraryProject && !isJavaProject) {
    throw new InvalidUserDataException(
        "'com.android.library' or 'android-library' plugin was found, not a Android Project ??")
}

// Declare a dependency configuration for pulling doclava jar
configurations {
    javadocDoclet
}
dependencies {
    javadocDoclet("com.google.doclava:doclava:1.0.6")
}

// Returns if the build version is actually a release version
def isReleaseVersion() {
    return !version.endsWith("SNAPSHOT")
}

// Returns if the build needs to be signed
def isSigningRequired() {
    return isReleaseVersion()
}

// Return the filename containing the property for maven signing
def getMavenSigningPropertiesFilename() {
    return "$rootDir/maven-signing.properties"
}

// Return the name of the property which stores the filename and path
// of the maven signing information
def getMavenSigningConfigProperty() {
    return "maven-signing-config"
}

// Return the filename containing the property for Sonatype OSSRH
// credentials
def getSonatypeOssrhPropertiesFilename() {
    return "$rootDir/sonatype-ossrh.properties"
}

// Return the name of the property which stores the filename and path
// of the Sonatype OSSRH credentials
def getSonatypeOssrhConfigProperty() {
    return "sonatype-ossrh-config"
}

// Helper method to return the properties stored in a file which
// points to another file (containing the properties)
def getLinkedProperties(String linkedFilename, String propertyName) {
    Properties returnProperties = null
    File linkFile = new File(linkedFilename)
    if (linkFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(linkFile))
        if (properties.containsKey(propertyName)) {
            File propertiesFile = new File(properties[propertyName])
            if (propertiesFile.exists()) {
                properties = new Properties()
                properties.load(new FileInputStream(propertiesFile))
                returnProperties = properties
            }
        }
    }
    return returnProperties
}

// Get the maven signing related properties
def getSigningProperties() {
    return getLinkedProperties(getMavenSigningPropertiesFilename(), getMavenSigningConfigProperty())
}

// Get the Sonatype OSSRH credential properties
def getSonatypeOssrhProperties() {
    return getLinkedProperties(getSonatypeOssrhPropertiesFilename(), getSonatypeOssrhConfigProperty())
}

// Get the repository URL
ext.getRepositoryUrl = { Boolean isSnapshot ->
    String url = null
    if (isSnapshot) {
        url = (ext.useSonatypeOssrhCredentials) ? ext.ossrhSnapshotUrl : SNAPSHOT_REPOSITORY_URL
    }
    else {
        url = (ext.useSonatypeOssrhCredentials) ? ext.ossrhReleaseUrl : RELEASE_REPOSITORY_URL
    }
    return url
}

// Get the repository username
ext.getRepositoryUsername = { Boolean isSnapshot ->
    if (ext.useSonatypeOssrhCredentials) {
        return ext.ossrhUsername
    }
    else {
        return (isSnapshot) ? SNAPSHOT_REPOSITORY_USERNAME : RELEASE_REPOSITORY_USERNAME
    }
}

// Get the repository password
ext.getRepositoryPassword = { Boolean isSnapshot ->
    if (ext.useSonatypeOssrhCredentials) {
        return ext.ossrhPassword
    }
    else {
        return (isSnapshot) ? SNAPSHOT_REPOSITORY_PASSWORD : RELEASE_REPOSITORY_PASSWORD
    }
}

apply plugin: 'maven'
apply plugin: 'signing'

// GRADLE-1285 - workaround to get <packaging>jar</packaging>
//               into the pom file
def pomPackagingElement = { root ->
    if (POM_PACKAGING.equalsIgnoreCase("jar")) {
        def children = root.asNode().children()
        def versionIndex = children.indexOf(children.find {it.name().localPart == 'version'})
        children.add(versionIndex + 1, new Node(null, 'packaging', POM_PACKAGING))
    }
}

// Configure the mavenDeployer
// Repository details can only be retrieved in afterEvaluate since
// it needs the signing and credential information
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: project.getRepositoryUrl(false)) {
                    authentication(
                        userName: project.getRepositoryUsername(false),
                        password: project.getRepositoryPassword(false))
                }

                snapshotRepository(url: project.getRepositoryUrl(true)) {
                    authentication(
                        userName: project.getRepositoryUsername(true),
                        password: project.getRepositoryPassword(true))
                }

                // Get rid of optional dependencies (does not help having them anyways)
                pom.whenConfigured { pom ->
                    pom.dependencies.removeAll { it.scope == "optional" }
                }
            }
        }
    }
}

// Configure the mavenDeployer
uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME

            pom {
                project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                    inceptionYear POM_INCEPTION_YEAR

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                        }
                    }

                    issueManagement {
                        system POM_ISSUE_MANAGEMENT_SYSTEM
                        url POM_ISSUE_MANAGEMENT_URL
                    }
                }
            }

            pom.withXml pomPackagingElement
        }
    }
}

afterEvaluate { project ->
    if (isAndroidLibraryProject) {
        // Task to generate android sources jar
        task allSourcesJar(type: Jar) {
            description "Builds Android Source jar artifact suitable for maven deployment"
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }

        // Task to generate android javadoc jar
        task javadocJar(type: Jar, dependsOn: generateJavadocRelease) {
            description "Builds Android Javadoc jar artifact suitable for maven deployment"
            classifier = "javadoc"
            from generateJavadocRelease.destinationDir
        }
    }
    else {
        // Task to generate a sources jar
        task allSourcesJar(type: Jar) {
            description = 'Builds a source jar artifact suitable for maven deployment'
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        // Configure the javadoc generation using doclava
        configure(javadoc) {
            options.docletpath = configurations.javadocDoclet.files.asType(List)
            options.doclet = "com.google.doclava.Doclava"
            title = null
            options {
                addStringOption "hdf project.name", POM_NAME
                addStringOption "federate JDK", "http://download.oracle.com/javase/6/docs/api/index.html?"
                addStringOption "federationxml JDK", "http://doclava.googlecode.com/svn/static/api/openjdk-6.xml"
            }
            failOnError true
        }

        // Task to generate a javadoc jar
        task javadocJar(type: Jar, dependsOn: javadoc) {
            description = 'Builds a javadoc jar artifact suitable for maven deployment'
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    }

    // List of all artifacts to be published
    artifacts {
        archives allSourcesJar
        archives javadocJar
    }
}

if (isAndroidLibraryProject) {
    android.libraryVariants.all { variant ->
        if (variant.buildType.name.equalsIgnoreCase("debug")) {
            return; // Skip debug builds.
        }

        def name = variant.name.capitalize()

        // Task to configure the android javadoc generation using doclava
        task("generateJavadoc$name", type: Javadoc, dependsOn: "assemble$name") {
            description "Generates Javadoc for $variant.name."
            destinationDir = new File(destinationDir, variant.baseName)
            source = files(variant.javaCompile.source)
            classpath = files(
                plugins.findPlugin("com.android.library").getBootClasspath(),
                variant.javaCompile.classpath)
            options.docletpath = configurations.javadocDoclet.files.asType(List)
            options.doclet = "com.google.doclava.Doclava"
            title = null
            options {
                addStringOption "hdf project.name", POM_NAME
                addStringOption "federate JDK", "http://download.oracle.com/javase/6/docs/api/index.html?"
                addStringOption "federationxml JDK", "http://doclava.googlecode.com/svn/static/api/openjdk-6.xml"
                addStringOption "federate android", "http://d.android.com/reference"
                addStringOption "federationxml android", "$rootDir/android-19.xml"
            }
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            failOnError true
        }
    }
}

// Disable using Sonatype OSSRH Credentials by default
// unless we find the configuration
ext.useSonatypeOssrhCredentials = false

// Maven Signing stuff
Properties signingProperties = null
if (isSigningRequired()) {
    signingProperties = getSigningProperties()
}
if (signingProperties != null) {
    // Enable Signing
    apply plugin: 'signing'

    ext."signing.keyId" = signingProperties['keyId']
    ext."signing.password" = signingProperties['password']
    ext."signing.secretKeyRingFile" = signingProperties['secretKeyRingFile']


    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
        }
    }
    signing {
        sign configurations.archives
        required true
    }
    println "Maven Signing Enabled"

    // Fetch Sonatype OSSRH credentials
    Properties sonatypeOssrhProperties = getSonatypeOssrhProperties()
    if (sonatypeOssrhProperties != null) {
        ext.ossrhUsername = sonatypeOssrhProperties['ossrhUsername']
        ext.ossrhPassword = sonatypeOssrhProperties['ossrhPassword']
        ext.ossrhReleaseUrl = sonatypeOssrhProperties['ossrhReleaseUrl']
        ext.ossrhSnapshotUrl = sonatypeOssrhProperties['ossrhSnapshotUrl']
        if (ext.ossrhUsername != null && ext.ossrhPassword != null &&
            ext.ossrhReleaseUrl != null && ext.ossrhSnapshotUrl != null) {
            ext.useSonatypeOssrhCredentials = true
        }
    }
}
else {
    // Disable Signing
    println "Maven Signing Disabled"
}

if (ext.useSonatypeOssrhCredentials) {
    println "Using Sonatype OSSRH Credentials"
}
else {
    println "Not using Sonatype OSSRH Credentials"
}
